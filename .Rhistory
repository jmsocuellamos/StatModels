from palmerpenguins import load_penguins
import palmerpenguins as plm
import numpy as np
0.97*0.03
2*(0.97*0.03)
0.97*0.97
0.97*0.97+0.0006
1-0.97*0.97+0.0006
load("/Users/javiermorales/Dropbox/ESTADISTICA/SimProSist/libro/SimProSist.RData")
load("/Users/javiermorales/Dropbox/ESTADISTICA/SimProSist/libro/SimProSist.RData")
install.packages("tensorflow")
install.packages("keras")
install.packages("kerasR")
install.packages("kerastuneR")
install.packages("GLMsData")
data(dental)
plot(DMFT ~ Sugar, data=dental )
library(GLMsData)
data(dental)
plot(DMFT ~ Sugar, data=dental )
dental
dput(dental)
90-26
93-29
90-29
summary(dental$Sugar)
pmat <- matrix(c(0.51, 0.90, 0.49, 0.1), nrow=2)
pmat
pmat^0
pmat^1
pmat^2
pmat^3
pmat^10
pmat <- matrix(c(0.51, 0.90, 0.49, 0.1), nrow=2)
mmat <- matrix(rep(0,4), nrow=2)
for(i in 0:10)
{
mmat<-mmat+pmat^i
}
mmat
library(reticulate)
use_python("/usr/local/bin/python")
Sys.which("python")
source("~/.active-rstudio-document")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("/usr/bin/python")
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("/usr/bin/python")
use_condaenv("myenv")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("/usr/bin/python")
reticulate::repl_python()
library(reticulate)
use_python("/usr/bin/python")
import("pandas")
pandas <- import("pandas")
use_python("/usr/anaconda3/bin/python")
use_python("/Users/javiermorales/anaconda3/bin/python")
library(reticulate)
use_python("/Users/javiermorales/anaconda3/bin/python")
pandas <- import("pandas")
flights = pandas.read_csv("flights.csv")
import("pandas")
flights = pandas.read_csv("flights.csv")
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("/usr/bin/python")
pandas<-import("pandas")
pandas
?pandas.read_csv
pandas.read_csv("flights.csv")
pandas$listdir(".")
pandas$read_csv("flights.csv")
install.packages("skimr")
install.packages(c("mlr3", "mlr3benchmark", "mlr3cluster", "mlr3data", "mlr3db", "mlr3filters", "mlr3fselect"))
install.packages(c("mlr3proba", "mlr3tuning"))
install.packages("survivalmodels")
remotes::install_github("mlr-org/mlr3extralearners")
library(survivalmodels)
install_pycox(pip = TRUE, install_torch = TRUE)
install_keras(pip = TRUE, install_tensorflow = TRUE)
y
library(survivalmodels)
install_pycox(pip = TRUE, install_torch = TRUE)
install_keras(pip = TRUE, install_tensorflow = TRUE)
library(reticulate)
install_pycox(pip = TRUE, install_torch = TRUE)
install_pycox(pip = TRUE, install_torch = FALSE)
py_install(pycox, method = "virtualenv")
library(reticulate)
py_install(pandas)
library(reticulate)
# create a new environment
conda_create("r-reticulate")
py_install("pandas")
conda_install("r-reticulate", "scipy")
knitr::opts_chunk$set(echo = TRUE)
```{r librerias}
install.packages(c("mlr3benchmark", "mlr3pipelines", "mlr3proba",
"mlr3tuning", "survivalmodels"))
remotes::install_github("mlr-org/mlr3extralearners")
library(reticulate)
library(survivalmodels)
library(reticulate)
library(survivalmodels)
# create a new environment in pythom
conda_create("r-reticulate")
# install pycox y keras
conda_install("r-reticulate", "pycox")
conda_install("r-reticulate", "keras")
# import (it will be automatically discovered in "r-reticulate")
pycox <- import("pycox")
install_pycox(pip = TRUE, install_torch = TRUE)
virtualenv_create("r-reticulate")
load("~/Dropbox/ESTADISTICA/ILISABIO/Competing Risks JAGS.RData")
setwd("~/Dropbox/ESTADISTICA/ILISABIO")
datos.clean
View(datos.clean)
View(datos.clean)
knitr::opts_chunk$set(fig.align='center',
out.width='90%',
class.source="Rchunk",
class.output="Rout",
message = FALSE,
warning = FALSE,
tidy = TRUE)
datos.clean <- datos[,-c(1, 2, 3, 4)]
View(datos.clean)
write.csv("datosCR.csv")
write.csv(datos.clean, "datosCR.csv")
setwd("~/Dropbox/ESTADISTICA/LibrosWeb/StatModels")
library(lme4)
library(nlme)
library(lattice)
data(sleepstudy)
str(sleepstudy)
data(sleepstudy)
str(sleepstudy)
data(sleepstudy)
str(sleepstudy)
data(sleepstudy)
str(sleepstudy)
data(sleepstudy)
str(sleepstudy)
data(sleepstudy)
str(sleepstudy)
ggplot(sleepstudy, aes(x = Days, y = Reaction)) +
geom_point() +
geom_smooth(method = gam, se = FALSE) +
xlab("Días") +
ylab("Tiempo de reacción")
library(tidyverse)
library(tidymodels)
library(stringr)
library(forcats)
library(lubridate)
library(magrittr)
library(broom)
library(pubh)
library(datasets)
library(lmtest)
library(MASS)
library(kableExtra)
library(mosaic)
library(latex2exp)
library(moonBook)
library(sjlabelled)
library(sjPlot)
library(reshape2)
library(olsrr)
library(ggfortify)
library(mgcv)
library(modelr)
library(alr4)
library(equatiomatic)
library(survival)
library(survminer)
# Parámetros gráficos
theme_set(theme_sjplot2())
ggplot(sleepstudy, aes(x = Days, y = Reaction)) +
geom_point() +
geom_smooth(method = gam, se = FALSE) +
xlab("Días") +
ylab("Tiempo de reacción")
ggplot(sleepstudy, aes(x = Days, y = Reaction)) +
geom_point() +
xlab("Días") +
ylab("Tiempo de reacción")
ggplot(sleepstudy, aes(x = Days, y = Reaction , col = Subject)) +
geom_point() +
geom_smooth(method = gam, se = FALSE) +
xlab("Días") +
ylab("Tiempo de reacción")
ggplot(sleepstudy, aes(x = Days, y = Reaction)) +
geom_point() +
xlab("Días") +
ylab("Tiempo de reacción") +
facet_wrap(~ Subject, ncol = 6)
data("Orthodont")
str(Orthodont)
ggplot(Orthodont, aes(x = age, y = distance)) +
geom_point() +
xlab("Edad") +
ylab("Distancia")
ggplot(Orthodont, aes(x = age, y = distance, color = Sex)) +
geom_point() +
xlab("Edad") +
ylab("Distancia")
ggplot(Orthodont, aes(x = age, y = distance)) +
geom_point() +
xlab("Edad") +
ylab("Distancia") +
facet_wrap(~ Subject, ncol = 6)
ggplot(Orthodont, aes(x = age, y = distance)) +
geom_point() +
geom_smooth(method = gam, se = FALSE) +
xlab("Edad") +
ylab("Distancia") +
facet_wrap(~ Subject, ncol = 6)
data("Pixel")
str(Pixel)
ggplot(Pixel, aes(x = day, y = pixel, col = Side)) +
geom_point() +
geom_smooth(method = loess, se = FALSE) +
xlab("Día") +
ylab("pixel") +
facet_wrap(~ Dog, ncol = 5)
ggplot(Pixel, aes(x = day, y = pixel, col = Side)) +
geom_point() +
xlab("Día") +
ylab("pixel") +
facet_wrap(~ Dog, ncol = 5)
data("Oats")
str(Oats)
ggplot(Oats, aes(x = nitro, y = yield, col = Variety)) +
geom_point() +
xlab("Concentración") +
ylab("Rendimiento") +
facet_wrap(~ Block, ncol = 3)
data("Penicillin")
str(Penicillin)
ggplot(Penicillin, aes(x = diameter, y = plate, col = sample)) +
geom_point() +
xlab("Diameter") +
ylab("Sample")
fit1 <- lmer(Reaction ~ Days + (1 | Subject), sleepstudy)
# load libraries
library(tidyverse)
library(tidymodels)
library(stringr)
library(forcats)
library(lubridate)
library(magrittr)
library(broom)
library(pubh)
library(datasets)
library(lmtest)
library(MASS)
library(kableExtra)
library(mosaic)
library(latex2exp)
library(moonBook)
library(sjlabelled)
library(sjPlot)
library(reshape2)
library(olsrr)
library(ggfortify)
library(mgcv)
library(modelr)
library(alr4)
library(equatiomatic)
library(survival)
library(survminer)
# Parámetros gráficos
theme_set(theme_sjplot2())
library(lme4)
library(nlme)
library(lattice)
fit1 <- lmer(Reaction ~ Days + (1 | Subject), sleepstudy)
fit1 <- lmer(Reaction ~ Days, sleepstudy)
fit1 <- lm(Reaction ~ Days, sleepstudy)
fit2 <- lmer(Reaction ~ Days + (1 | Subject), sleepstudy)
fit1 <- lm(Reaction ~ Days, sleepstudy)
fit2 <- lmer(Reaction ~ Days + (1 | Subject), sleepstudy)
fit3 <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
summary(fit1)
summary(fit2)
summary(fit3)
glm_coef(fit1)
glm_coef(fit2)
tab_model(fit1)
tab_model(fit2)
fit1
attributes(summary(fit))
attributes(summary(fit1))
summary(fit1)$sigma
anova(fit1,fit2,fit3)
anova(fit2,fit3)
AIC(fit1)
AIC(fit2)
AIC(fit3)
summary(fit1)
summary(fit2)
anova(fit1)
summary(fit2)
37.12/(37.12+30.99)
plot_model(fit1)
plot_model(fit1, type = "pred")
plot_model(fit1, type = "pred", show.data = TRUE)
plot_model(fit2, type = "pred", show.data = TRUE)
plot_model(fit2, type = "re", show.data = TRUE)
sleepstudy$predic1 <- predict(fit1)
ggplot(sleepstudy, aes(x = Days, y = Reaction)) +
geom_point(cex = 0.7) +
geom_line(aes(Days,predict1), col ="red") +
xlab("Días") +
ylab("Tiempo de reacción")
sleepstudy$predic1 <- predict(fit1)
ggplot(sleepstudy, aes(x = Days, y = Reaction)) +
geom_point(cex = 0.7) +
geom_line(aes(Days,predic1), col ="red") +
xlab("Días") +
ylab("Tiempo de reacción")
profile(fit1)
profile(fit2)
prf <- profile(fit2)
confint(prf)
densityplot(prf)
splom(prf)
prf
densityplot(prf[,2])
densityplot(prf$.sig01)
prf[,2]
prf
densityPlot(prf)
ggplot(prf, aes(.sig02)) + geom_density()
ggplot(prf, aes(.sig01)) + geom_density()
ggplot(prf, aes(sigma)) + geom_density()
ggplot(prf, aes(.sigma)) + geom_density()
ggplot(prf[,prf$.par == .sigma], aes(.sigma)) + geom_density()
ggplot(prf[,prf$.par == ".sigma"], aes(.sigma)) + geom_density()
prf[prf$.par == ".sigma",]
ggplot(prf[prf$.par == ".sigma",], aes(.sigma)) + geom_density()
prf <- profile(fit2)
confint(prf)
splom(prf)
# Efectos fijos
dotplot(coef(fit2))
# Efectos aleatorios
dotplot(ranef(fit2))
# Efectos fijos
dotplot(coef(fit2))
dotplot(ranef(fit2))
# Efectos fijos
dotplot(coef(fit2))
# Efectos aleatorios
dotplot(ranef(fit2))
sleepstudy$predic2 <- predict(fit2)
ggplot(sleepstudy, aes(x = Days, y = Reaction)) +
geom_point(cex = 0.7) +
geom_line(aes(Days,predic2), col ="red") +
xlab("Días") +
ylab("Tiempo de reacción") +
facet_wrap(~ Subject, ncol = 6)
summary(fit3)
summary(fit3)
# Efectos fijos
dotplot(coef(fit3))
# Efectos aleatorios
dotplot(ranef(fit3))
# Efectos fijos
dotplot(coef(fit3))
# Efectos aleatorios
dotplot(ranef(fit3))
sleepstudy$predic3 <- predict(fit3)
ggplot(sleepstudy, aes(x = Days, y = Reaction)) +
geom_point(cex = 0.7) +
geom_line(aes(Days,predic3), col ="red") +
xlab("Días") +
ylab("Tiempo de reacción") +
facet_wrap(~ Subject, ncol = 6)
AIC(fit1); AIC(fit2); AIC(fit3)
anova(fit2, fit3)
anova(fit2, fit3)
fit1 <- lmer(distance ~ age + (1 | Subject), Orthodont)
fit2 <- lmer(distance ~ age + (age | Subject), Orthodont)
anova(fit1, fit2)
summary(fit1)
# Efectos fijos
dotplot(coef(fit1))
# Efectos aleatorios
dotplot(ranef(fit1))
Orthodont$predic <- predict(fit1)
ggplot(Orthodont, aes(x = age, y = distance)) +
geom_point(cex = 0.7) +
geom_line(aes(age,predic), col ="red") +
xlab("Edad") +
ylab("Distancia") +
facet_wrap(~ Subject, ncol = 6)
# Modelo lineal con interceptación aleatoria
fit1 <- lmer(pixel ~ day + (1 | Dog/side), Pixel)
# Modelo lineal con interceptación aleatoria
fit1 <- lmer(pixel ~ day + (1 | Dog/Side), Pixel)
# Modelo lineal con interceptación y pendiente aleatoria
fit2 <- lmer(pixel ~ day + (day | Dog/Side), Pixel)
# Modelo polinómico con interceptación aleatoria
fit3 <- lmer(pixel ~ day + I(day^2) + (1 | Dog/Side), Pixel)
# Modelo polinómico con interceptación y pendiente aleatoria
fit4 <- lmer(pixel ~ day + I(day^2) + (day | Dog/Side), Pixel)
anova(fit1, fit2)
anova(fit3, fit4)
AIC(fit1);AIC(fit2);AIC(fit3);AIC(fit4)
summary(fit4)
summary(fit4)
# Efectos fijos
dotplot(coef(fit4))
# Efectos aleatorios
dotplot(ranef(fit4))
# Efectos aleatorios
dotplot(ranef(fit4))
Pixel$predic <- predict(fit4)
ggplot(Pixel, aes(x = day, y = pixel)) +
geom_point(cex = 0.7) +
geom_line(aes(day, predic), col ="red") +
xlab("Día") +
ylab("Intensidad Pixel") +
facet_wrap(~ Dog, ncol = 6)
Pixel$predic <- predict(fit4)
ggplot(Pixel, aes(x = day, y = pixel)) +
geom_point(cex = 0.7) +
geom_line(aes(day, predic), col ="red") +
xlab("Día") +
ylab("Intensidad Pixel") +
facet_wrap(~ Dog, ncol = 3)
Pixel$predic <- predict(fit4)
ggplot(Pixel, aes(x = day, y = pixel)) +
geom_point(aes(col = Side)) +
geom_line(aes(day, predic,col = Side)) +
xlab("Día") +
ylab("pixel") +
facet_wrap(~ Dog, ncol = 5)
Pixel$predic <- predict(fit4)
ggplot(Pixel, aes(x = day, y = pixel)) +
geom_point(aes(col = Side)) +
geom_line(aes(day, predic, col = Side)) +
xlab("Día") +
ylab("pixel") +
facet_wrap(~ Dog, ncol = 5)
# Modelo lineal sin interacción con interceptación aleatoria
fit1 <- lmer(yield ~ ordered(nitro) + Variety + (1 | Block/Variety), Oats)
# Modelo lineal con interacción con interceptación aleatoria
fit2 <- lmer(yield ~ ordered(nitro) * Variety + (1 | Block/Variety), Oats)
anova(fit1, fit2)
summary(fit1)
Oats$predic <- predict(fit1)
ggplot(Oats, aes(x = nitro, y = yield)) +
geom_point(aes(col = Variety)) +
geom_line(aes(nitro, predic, col = Variety)) +
xlab("Concentración") +
ylab("Rendimiento") +
facet_wrap(~ Block, ncol = 3)
fit1 <- lmer(diameter ~ 1 + (1 | plate) + (1 | sample), Penicillin)
summary(fit1)
# gráfico de predicción
Penicillin$predic <- predict(fit1)
ggplot(Penicillin, aes(x = sample, y = diameter)) +
geom_point() +
geom_point(aes(x = sample, y = predic), col = "red") +
xlab("Sample") +
ylab("Diameter") +
facet_wrap(~ plate, ncol = 6)
fit <- lmer(Reaction ~ Days + (1 | Subject), sleepstudy)
fit <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
plot(fit, type = c("p", "smooth"))
qqmath(fit, id = 0.05)
if (requireNamespaces("reticulate")) {
# all defaults
deephit(data = simsurvdata(50))
# common parameters
deephit(data = simsurvdata(50), frac = 0.3, activation = "relu",
num_nodes = c(4L, 8L, 4L, 2L), dropout = 0.1, early_stopping = TRUE, epochs = 100L,
batch_size = 32L)
}
library(reticulate)
if (requireNamespaces("reticulate")) {
# all defaults
deephit(data = simsurvdata(50))
# common parameters
deephit(data = simsurvdata(50), frac = 0.3, activation = "relu",
num_nodes = c(4L, 8L, 4L, 2L), dropout = 0.1, early_stopping = TRUE, epochs = 100L,
batch_size = 32L)
}
deephit(data = simsurvdata(50))
library(survivalmodels)
if (requireNamespaces("reticulate")) {
# all defaults
deephit(data = simsurvdata(50))
# common parameters
deephit(data = simsurvdata(50), frac = 0.3, activation = "relu",
num_nodes = c(4L, 8L, 4L, 2L), dropout = 0.1, early_stopping = TRUE, epochs = 100L,
batch_size = 32L)
}
import(pycox)
import("pycox")
install_pycox()
repl_python()
